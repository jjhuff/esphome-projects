esphome:
  name: snow
  name_add_mac_suffix: true
  includes:
    #    - tof_vl53l1x.h
    #  libraries:
    #    - "Wire"
    #    - "VL53L1x"
  on_shutdown:
    - priority: -100.0
      then:
        # Update all sensors
        - component.update: uptime_sensor
        - component.update: wifi_signal_sensor
        #- component.update: mlx90614_sensor
        #- component.update: distance_sensor
        #- component.update: battery_sensor

        #external_components:
        #  - source: github://Option-Zero/esphome-components@max17048
        #    components: [max17048]

preferences:
  flash_write_interval: 10min

esp32:
  board: adafruit_feather_esp32s3 #sparkfun_esp32s2_thing_plus
  variant: esp32s3

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  password: ""

ota:
  platform: esphome
  password: ""

web_server:
  port: 80

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Dashboard Fallback Hotspot"
    password: ""

captive_portal:

  #deep_sleep:
  #  run_duration: 60s
  #  sleep_duration: 10min
  #  id: deep_sleep_1

i2c:
  sda: GPIO8
  scl: GPIO9
  scan: true
  frequency: 100kHz

# Sensors with general information.
sensor:
  # Uptime sensor.
  - platform: uptime
    id: uptime_sensor
    name: Uptime
    update_interval: 120s

  # WiFi Signal sensor.
  - platform: wifi_signal
    id: wifi_signal_sensor
    name: WiFi Signal
    update_interval: 120s

    #  - platform: mlx90614
    #    id: mlx90614_sensor
    #    update_interval: 120s
    #    ambient:
    #      name: Ambient
    #    object:
    #      name: Surface
    #      emissivity: 0.98 # ~Snow
    #
    #  - platform: template
    #    name: Distance
    #    id: distance_sensor
    #    accuracy_decimals: 0
    #    unit_of_measurement: "mm"
    #    state_class: "measurement"
    #    update_interval: 120s
    #    lambda: |-
    #      return id(raw_distance_sensor).state;
    #
    #  - platform: custom
    #    lambda: |-
    #      auto my_sensor = new MyCustomSensor();
    #      App.register_component(my_sensor);
    #      return {my_sensor};
    #    sensors:
    #      name: "Raw Distance"
    #      id: raw_distance_sensor
    #      internal: true
    #      accuracy_decimals: 0
    #      unit_of_measurement: "mm"
    #      state_class: "measurement"
    #      filters:
    #        - median:
    #            window_size: 60
    #            send_every: 60
    #            send_first_at: 60
    #
    #  - platform: max17048
    #    id: battery_sensor
    #    update_interval: 120s
    #    battery_voltage:
    #      name: Battery voltage
    #    battery_level:
    #      name: Battery level
    #    rate:
    #      name: Battery discharge rate
